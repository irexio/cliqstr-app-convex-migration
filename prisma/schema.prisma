// This schema is APA-hardened and includes child safety, parental linking, and moderation defaults.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your actual provider
  url      = env("DATABASE_URL")
}

enum AIModerationLevel {
  strict
  moderate
  relaxed
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  resetToken        String?
  resetTokenExpires DateTime?
  verificationToken String?
  verificationExpires DateTime?
  isApproved        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  profile            Profile?
  parentLinks        ParentLink[] // if this user is a parent
  children           ParentLink[]    @relation("ChildLinks")
  account            Account? // üîê APA system metadata
  ownedCliqs         Cliq[]          @relation("CliqOwner")
  memberships        Membership[]
  Post               Post[]
  Reply              Reply[]
  invitesSent        Invite[]        @relation("SentInvites")
  inviteRequestsSent InviteRequest[] @relation("InviteRequestsSent")
  redAlertsTriggered RedAlert[]
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  username  String   @unique
  firstName String?
  birthdate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ageGroup          String?
  aiModerationLevel AIModerationLevel @default(strict)
  about             String?
  image             String?
  bannerImage       String?

  user          User           @relation(fields: [userId], references: [id])
  childSettings ChildSettings?
}

model ParentLink {
  id       String  @id @default(cuid())
  parentId String?
  childId  String
  email    String?

  parent User? @relation(fields: [parentId], references: [id])
  child  User  @relation("ChildLinks", fields: [childId], references: [id])

  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ChildSettings {
  id        String  @id @default(cuid())
  profileId String  @unique
  profile   Profile @relation(fields: [profileId], references: [id])

  canCreatePublicCliqs Boolean @default(false)
  canSendInvites       Boolean @default(false)
  canInviteChildren    Boolean @default(false)  // New permission for teens 13+ to invite other children
  isSilentlyMonitored  Boolean @default(true)

  canAccessGames    Boolean @default(false)
  canPostImages     Boolean @default(false)
  canShareYouTube   Boolean @default(false)
  visibilityLevel   String?
  aiModerationLevel String?
}

/// üîê APA ‚Äî System-level metadata for each user
model Account {
  id               String   @id @default(cuid())
  userId           String   @unique
  role             String
  isApproved       Boolean  @default(false)
  stripeStatus     String?
  plan             String?
  stripeCustomerId String?
  createdAt        DateTime @default(now())
  suspended        Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

enum CliqPrivacy {
  private
  semi_private
  public
}

model Cliq {
  id          String    @id @default(cuid())
  name        String
  description String?
  privacy     String    @default("private")
  coverImage  String?
  createdAt   DateTime  @default(now())
  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  ownerId     String

  owner          User            @relation("CliqOwner", fields: [ownerId], references: [id])
  posts          Post[]
  memberships    Membership[]
  invites        Invite[]        @relation("CliqInvites")
  inviteRequests InviteRequest[] @relation("CliqInviteRequests")
  redAlerts      RedAlert[]
}

model Post {
  id        String    @id @default(cuid())
  content   String
  image     String?
  createdAt DateTime  @default(now())
  deleted   Boolean   @default(false)
  expiresAt DateTime?
  authorId  String
  cliqId    String

  author  User    @relation(fields: [authorId], references: [id])
  cliq    Cliq    @relation(fields: [cliqId], references: [id])
  replies Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  authorId  String

  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])
}

model Invite {
  id                 String    @id @default(cuid())
  code               String    @unique
  cliq               Cliq      @relation("CliqInvites", fields: [cliqId], references: [id])
  cliqId             String
  inviter            User      @relation("SentInvites", fields: [inviterId], references: [id])
  inviterId          String
  invitedUserId      String?
  invitedRole        String
  inviteeEmail       String
  status             String    @default("pending")
  isApproved         Boolean   @default(false) // üîê APA: Required for membership control
  createdAt          DateTime  @default(now())
  expiresAt          DateTime?
  maxUses            Int
  used               Boolean   @default(false)
  message            String?
  // New fields for redesigned invite system
  friendFirstName    String?   // Who the invite is for (required for child invites)
  trustedAdultContact String?  // Email of parent/guardian (required for child invites)
  inviteType         String?   // 'child' or 'adult'
  inviteNote         String?   // Optional message to parent/guardian
}

model InviteRequest {
  id           String   @id @default(cuid())
  email        String
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  cliqId       String
  invitedRole  String
  inviteeEmail String
  inviterId    String

  cliq    Cliq @relation("CliqInviteRequests", fields: [cliqId], references: [id])
  inviter User @relation("InviteRequestsSent", fields: [inviterId], references: [id])
}

model ParentAuditLog {
  id        String   @id @default(cuid())
  parentId  String
  childId   String
  action    String
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())
}

model RedAlert {
  id            String   @id @default(cuid())
  cliqId        String
  triggeredById String
  reason        String?
  triggeredAt   DateTime @default(now())

  cliq          Cliq     @relation(fields: [cliqId], references: [id])
  triggeredBy   User     @relation(fields: [triggeredById], references: [id])
}

model PasswordResetAudit {
  id        String   @id @default(cuid())
  email     String
  ip        String?
  event     String   // "requested" or "completed"
  createdAt DateTime @default(now())
}

model Membership {
  id       String   @id @default(cuid())
  userId   String
  cliqId   String
  role     String   @default("Member")
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  cliq Cliq @relation(fields: [cliqId], references: [id])

  @@unique([userId, cliqId])
}
