generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(cuid())
  email               String          @unique
  password            String
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  resetToken          String?
  resetTokenExpires   DateTime?
  verificationExpires DateTime?
  verificationToken   String?
  isVerified          Boolean         @default(false)
  account             Account?
  ownedCliqs          Cliq[]          @relation("CliqOwner")
  invitesSent         Invite[]        @relation("SentInvites")
  inviteRequestsSent  InviteRequest[] @relation("InviteRequestsSent")
  memberships         Membership[]
  myProfile           MyProfile?
  parentChildLinks    ParentLink[]    @relation("ParentChildLinks")
  Post                Post[]
  redAlertsTriggered  RedAlert[]
  Reply               Reply[]
  activityLogs        UserActivityLog[]
  parentAuditLogs     ParentAuditLog[]    @relation("ParentAuditLogs")
}

model MyProfile {
  id                String            @id @default(cuid())
  username          String            @unique
  birthdate         DateTime
  createdAt         DateTime          @default(now())
  userId            String            @unique
  ageGroup          String?
  about             String?
  bannerImage       String?
  image             String?
  updatedAt         DateTime          @updatedAt
  aiModerationLevel AIModerationLevel @default(strict)
  firstName         String?
  lastName          String?
  showYear          Boolean           @default(false)
  childSettings     ChildSettings?
  user              User              @relation(fields: [userId], references: [id], map: "Profile_userId_fkey")
  scrapbookItems    ScrapbookItem[]
}



model ChildSettings {
  id                     String    @id @default(cuid())
  profileId              String    @unique
  canCreatePublicCliqs   Boolean   @default(false)
  canJoinPublicCliqs     Boolean   @default(false)  // APA-safe: Parent controls child's public cliq access
  canSendInvites         Boolean   @default(false)
  isSilentlyMonitored    Boolean   @default(true)
  aiModerationLevel      String?
  canAccessGames         Boolean   @default(false)
  canPostImages          Boolean   @default(false)
  canShareYouTube        Boolean   @default(false)
  visibilityLevel        String?
  inviteRequiresApproval Boolean   @default(true)
  myProfile              MyProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

/// üîê APA ‚Äî System-level metadata for each user
model Account {
  id               String   @id @default(cuid())
  userId           String   @unique
  birthdate        DateTime // Immutable birthdate for APA age verification
  role             String
  isApproved       Boolean  @default(false)
  stripeStatus     String?
  plan             String?
  stripeCustomerId String?
  createdAt        DateTime @default(now())
  suspended        Boolean  @default(false)
  user             User     @relation(fields: [userId], references: [id])
}

model Cliq {
  id             String          @id @default(cuid())
  name           String
  description    String?
  ownerId        String
  createdAt      DateTime        @default(now())
  deleted        Boolean         @default(false)
  deletedAt      DateTime?
  coverImage     String?
  privacy        String          @default("private")
  minAge         Int?            // Optional minimum age for joining (APA-safe age gating)
  maxAge         Int?            // Optional maximum age for joining (APA-safe age gating)
  owner          User            @relation("CliqOwner", fields: [ownerId], references: [id])
  invites        Invite[]        @relation("CliqInvites")
  inviteRequests InviteRequest[] @relation("CliqInviteRequests")
  memberships    Membership[]
  posts          Post[]
  redAlerts      RedAlert[]
  notices        CliqNotice[]  // Notice banners for this cliq
}

model CliqNotice {
  id        String    @id @default(cuid())
  cliqId    String
  type      String    // birthday, admin, red_alert_open, red_alert_resolved
  content   String    // message to display
  createdAt DateTime  @default(now())
  expiresAt DateTime? // auto-dismissal for birthday/resolved alerts
  cliq      Cliq      @relation(fields: [cliqId], references: [id], onDelete: Cascade)

  @@index([cliqId])
  @@index([expiresAt])
}

model Post {
  id        String    @id @default(cuid())
  content   String
  image     String?
  createdAt DateTime  @default(now())
  deleted   Boolean   @default(false)
  authorId  String
  cliqId    String
  expiresAt DateTime?
  author    User      @relation(fields: [authorId], references: [id])
  cliq      Cliq      @relation(fields: [cliqId], references: [id])
  replies   Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Invite {
  id                  String    @id @default(cuid())
  createdAt           DateTime  @default(now())
  cliqId              String
  status              String    @default("pending")
  inviterId           String
  invitedUserId       String?
  isApproved          Boolean   @default(false)
  code                String    @unique
  expiresAt           DateTime?
  invitedRole         String
  inviteeEmail        String
  maxUses             Int
  used                Boolean   @default(false)
  message             String?
  friendFirstName     String?
  inviteNote          String?
  inviteType          String?
  trustedAdultContact String?
  cliq                Cliq      @relation("CliqInvites", fields: [cliqId], references: [id])
  inviter             User      @relation("SentInvites", fields: [inviterId], references: [id])
}

model InviteRequest {
  id           String   @id @default(cuid())
  email        String
  status       String   @default("pending")
  createdAt    DateTime @default(now())
  cliqId       String
  invitedRole  String
  inviteeEmail String
  inviterId    String
  cliq         Cliq     @relation("CliqInviteRequests", fields: [cliqId], references: [id])
  inviter      User     @relation("InviteRequestsSent", fields: [inviterId], references: [id])
}

model ParentLink {
  id            String   @id @default(cuid())
  email         String   // Parent's email
  childId       String   // Child's user ID
  type          String   @default("family") // "family" or "invited"
  inviteContext String?  // Context for invited children (e.g., "invited to Soccer Team")
  createdAt     DateTime @default(now())
  child         User     @relation("ParentChildLinks", fields: [childId], references: [id])
  
  @@unique([email, childId])
}

model ParentAuditLog {
  id        String   @id @default(cuid())
  parentId  String
  childId   String
  action    String   // e.g., 'update_canSendInvites', 'update_isSilentlyMonitored'
  oldValue  String?
  newValue  String?
  createdAt DateTime @default(now())
  parent    User     @relation("ParentAuditLogs", fields: [parentId], references: [id])
}

model RedAlert {
  id            String   @id @default(cuid())
  cliqId        String
  triggeredById String
  reason        String?
  triggeredAt   DateTime @default(now())
  cliq          Cliq     @relation(fields: [cliqId], references: [id])
  triggeredBy   User     @relation(fields: [triggeredById], references: [id])
}

model PasswordResetAudit {
  id        String   @id @default(cuid())
  email     String
  ip        String?
  event     String
  createdAt DateTime @default(now())
}

model Membership {
  id       String   @id @default(cuid())
  userId   String
  cliqId   String
  role     String   @default("Member")
  joinedAt DateTime @default(now())
  cliq     Cliq     @relation(fields: [cliqId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, cliqId])
}

model ScrapbookItem {
  id        String    @id @default(cuid())
  profileId String
  imageUrl  String
  caption   String    @default("")
  isPinned  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  myProfile MyProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

enum AIModerationLevel {
  strict
  moderate
  relaxed
}

enum CliqPrivacy {
  private
  semi_private
  public
}

model UserActivityLog {
  id        String   @id @default(cuid())
  userId    String?
  event     String   // e.g., 'signup', 'login', 'invite-accept'
  detail    String?  // e.g., IP address, code used, manual vs invite
  debugId   String?  // for tracking odd flows
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}
