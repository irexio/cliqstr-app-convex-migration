generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Parent
  Child
  Adult
  Admin
}

enum MembershipRole {
  Owner
  Moderator
  Member
}

enum InviteStatus {
  pending
  approved
  used
  expired
}

enum CliqPrivacy {
  private
  semi_private
  public
}

model Invite {
  id           String    @id @default(cuid())
  code         String    @unique
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  used         Boolean   @default(false)
  status       InviteStatus @default(pending)
  invitedRole  Role
  isApproved   Boolean   @default(false)
  cliqId       String?
  maxUses      Int       @default(1)
  inviteeEmail String?
  message      String?

  inviter   User   @relation("UserToInvites", fields: [inviterId], references: [id])
  inviterId String
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name      String?

  resetToken        String?
  resetTokenExpires DateTime?

  profile   Profile?
  account   Account?   

  invites        Invite[] @relation("UserToInvites")
  cliqs          Cliq[]   @relation("OwnedCliqs")
  memberships    Membership[]
  posts          Post[]
  replies        Reply[]
  inviteRequests InviteRequest[] @relation("UserInviteRequests")
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  username  String   @unique
  birthdate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ageGroup     String?

  about       String?
  image       String?
  bannerImage String?

  user        User         @relation(fields: [userId], references: [id])
  parentLinks ParentLink[]
}

model ParentLink {
  id        String   @id @default(cuid())
  childId   String
  email     String
  createdAt DateTime @default(now())

  child Profile @relation(fields: [childId], references: [id])
}

model Cliq {
  id          String   @id @default(cuid())
  name        String
  description String?
  privacy     CliqPrivacy @default(private)
  coverImage  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deleted     Boolean  @default(false)
  deletedAt   DateTime?

  ownerId     String
  owner       User   @relation("OwnedCliqs", fields: [ownerId], references: [id])

  memberships    Membership[]
  posts          Post[]
  inviteRequests InviteRequest[]
}

model Membership {
  id       String   @id @default(cuid())
  userId   String
  cliqId   String
  role     MembershipRole @default(Member)
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  cliq Cliq @relation(fields: [cliqId], references: [id])

  @@unique([userId, cliqId])
}

model Post {
  id        String    @id @default(cuid())
  content   String
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  editedAt  DateTime?
  expiresAt DateTime?
  deleted   Boolean   @default(false)
  deletedAt DateTime?

  authorId String
  cliqId   String

  author  User    @relation(fields: [authorId], references: [id])
  cliq    Cliq    @relation(fields: [cliqId], references: [id])
  replies Reply[]
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  postId   String
  authorId String

  post   Post @relation(fields: [postId], references: [id])
  author User @relation(fields: [authorId], references: [id])
}

model InviteRequest {
  id           String   @id @default(cuid())
  cliqId       String
  inviterId    String
  invitedRole  Role
  inviteeEmail String
  message      String?
  status       InviteStatus
  createdAt    DateTime @default(now())

  cliq    Cliq @relation(fields: [cliqId], references: [id])
  inviter User @relation("UserInviteRequests", fields: [inviterId], references: [id])
}

model Account {
  id               String   @id @default(cuid())
  userId           String   @unique
  role             Role
  isApproved       Boolean @default(false)
  suspended        Boolean @default(false) // ðŸ”’ Added for APA-compliant parent suspension
  stripeStatus     String?
  plan             String?
  stripeCustomerId String?
  createdAt        DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
