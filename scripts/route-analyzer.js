#!/usr/bin/env node

/**
 * Route and Flow Analyzer for Cliqstr
 * 
 * This script automatically analyzes and documents API routes and flow changes
 * in the Cliqstr application. It can be run manually or as part of a git hook.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration
const API_ROUTES_DIR = path.join(process.cwd(), 'src', 'app', 'api');
const PAGE_ROUTES_DIR = path.join(process.cwd(), 'src', 'app');
const DOCS_OUTPUT_FILE = path.join(process.cwd(), 'docs', 'API-Routes-Flows.md');
const EXCLUDED_DIRS = ['node_modules', '.next', '.git', 'public'];

// Helper function to get all route files
function findRouteFiles(dir, fileList = [], prefix = '') {
  if (EXCLUDED_DIRS.includes(path.basename(dir))) return fileList;
  
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stats = fs.statSync(filePath);
    
    if (stats.isDirectory()) {
      findRouteFiles(filePath, fileList, `${prefix}/${file}`);
    } else if (file === 'route.ts' || file === 'route.js') {
      fileList.push({
        path: filePath,
        route: prefix || '/',
        content: fs.readFileSync(filePath, 'utf8')
      });
    }
  });
  
  return fileList;
}

// Helper function to find page files
function findPageFiles(dir, fileList = [], prefix = '') {
  if (EXCLUDED_DIRS.includes(path.basename(dir))) return fileList;
  
  const files = fs.readdirSync(dir);
  
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stats = fs.statSync(filePath);
    
    if (stats.isDirectory()) {
      findPageFiles(filePath, fileList, `${prefix}/${file}`);
    } else if (file === 'page.tsx' || file === 'page.js' || file === 'page.ts') {
      fileList.push({
        path: filePath,
        route: prefix || '/',
        content: fs.readFileSync(filePath, 'utf8')
      });
    }
  });
  
  return fileList;
}

// Extract HTTP methods from route files
function extractHttpMethods(content) {
  const methods = [];
  if (content.includes('export async function GET') || content.includes('export function GET')) methods.push('GET');
  if (content.includes('export async function POST') || content.includes('export function POST')) methods.push('POST');
  if (content.includes('export async function PUT') || content.includes('export function PUT')) methods.push('PUT');
  if (content.includes('export async function DELETE') || content.includes('export function DELETE')) methods.push('DELETE');
  if (content.includes('export async function PATCH') || content.includes('export function PATCH')) methods.push('PATCH');
  
  return methods.length ? methods : ['Unknown'];
}

// Extract route description from comments
function extractDescription(content) {
  const commentRegex = /\/\*\*([\s\S]*?)\*\//;
  const match = content.match(commentRegex);
  
  if (match && match[1]) {
    return match[1]
      .split('\n')
      .map(line => line.trim().replace(/^\*\s*/, ''))
      .filter(line => line)
      .join(' ');
  }
  
  // Try to find single-line comments
  const singleLineRegex = /\/\/\s*(.+)/;
  const singleLineMatch = content.match(singleLineRegex);
  
  if (singleLineMatch && singleLineMatch[1]) {
    return singleLineMatch[1].trim();
  }
  
  return 'No description available';
}

// Extract redirects from page files
function extractRedirects(content) {
  const redirects = [];
  const redirectRegex = /redirect\(['"]([^'"]+)['"]\)/g;
  let match;
  
  while ((match = redirectRegex.exec(content)) !== null) {
    redirects.push(match[1]);
  }
  
  return redirects;
}

// Generate documentation
function generateDocumentation() {
  console.log('Analyzing API routes and page flows...');
  
  const apiRoutes = findRouteFiles(API_ROUTES_DIR);
  const pageRoutes = findPageFiles(PAGE_ROUTES_DIR);
  
  let markdown = `# Cliqstr API Routes and Flow Documentation\n\n`;
  markdown += `*This file is automatically generated. Last updated: ${new Date().toISOString()}*\n\n`;
  
  // API Routes Section
  markdown += `## API Routes\n\n`;
  markdown += `| Route | Methods | Description |\n`;
  markdown += `| ----- | ------- | ----------- |\n`;
  
  apiRoutes.forEach(route => {
    const methods = extractHttpMethods(route.content);
    const description = extractDescription(route.content);
    
    markdown += `| \`${route.route}\` | ${methods.join(', ')} | ${description} |\n`;
  });
  
  // Page Flows Section
  markdown += `\n## Page Flows\n\n`;
  markdown += `| Page | Redirects To | Description |\n`;
  markdown += `| ---- | ------------ | ----------- |\n`;
  
  pageRoutes.forEach(page => {
    const redirects = extractRedirects(page.content);
    const description = extractDescription(page.content);
    
    markdown += `| \`${page.route}\` | ${redirects.length ? redirects.map(r => `\`${r}\``).join(', ') : 'None'} | ${description} |\n`;
  });
  
  // Add git changes section
  try {
    markdown += `\n## Recent Changes\n\n`;
    const recentChanges = execSync('git log -n 10 --pretty=format:"%h - %s (%cr)" -- src/app/').toString();
    markdown += "```\n" + recentChanges + "\n```\n";
  } catch (error) {
    markdown += `\n## Recent Changes\n\n*Git information not available*\n`;
  }
  
  // Write to file
  fs.writeFileSync(DOCS_OUTPUT_FILE, markdown);
  console.log(`Documentation generated at ${DOCS_OUTPUT_FILE}`);
}

// Main execution
generateDocumentation();
